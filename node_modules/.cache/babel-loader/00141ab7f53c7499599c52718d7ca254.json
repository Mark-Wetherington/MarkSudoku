{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Desktop\\\\GitHub\\\\Sudoku\\\\src\\\\Components\\\\Game\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Board = props => {\n  _s();\n\n  const [totalBoard, setTotalBoard] = useState(null);\n  let tempBoard = [];\n  let givenCell = 0;\n\n  for (let i = 0; i < props.initialBoard.size; i++) {\n    for (let j = 0; j < props.initialBoard.size; j++) {\n      if (props.initialBoard.squares[givenCell]) {\n        if (props.initialBoard.squares[givenCell].x === i && props.initialBoard.squares[givenCell].y === j) {\n          tempBoard.push(props.initialBoard.squares[givenCell]);\n        } else {\n          tempBoard.push({\n            x: i,\n            y: j,\n            value: \"a\"\n          });\n        }\n      } //        if (props.initialBoard.squares[i])\n      //        let thisCell = props.initialBoard.squares['x']['y']\n      //      tempBoard = [...tempBoard, { x: i, y: j, value:  }];\n\n    }\n  }\n\n  console.log(tempBoard); //let tempBoard = props.initialBoard.squares.map(cell => );\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: props.initialBoard.squares.map(cell => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: cell.value\n      }, cell.x.toString() + cell.y.toString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Board, \"2FUjwhX8IERv3aqV0pz/8ONqbfc=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Mark/Desktop/GitHub/Sudoku/src/Components/Game/Board.js"],"names":["useState","Board","props","totalBoard","setTotalBoard","tempBoard","givenCell","i","initialBoard","size","j","squares","x","y","push","value","console","log","map","cell","toString"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,IAAD,CAA5C;AAEA,MAAIK,SAAS,GAAG,EAAhB;AACA,MAAIC,SAAS,GAAG,CAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,YAAN,CAAmBC,IAAvC,EAA6CF,CAAC,EAA9C,EAAkD;AAChD,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACM,YAAN,CAAmBC,IAAvC,EAA6CC,CAAC,EAA9C,EAAkD;AAChD,UAAIR,KAAK,CAACM,YAAN,CAAmBG,OAAnB,CAA2BL,SAA3B,CAAJ,EAA2C;AACzC,YACIJ,KAAK,CAACM,YAAN,CAAmBG,OAAnB,CAA2BL,SAA3B,EAAsCM,CAAtC,KAA4CL,CAA5C,IACAL,KAAK,CAACM,YAAN,CAAmBG,OAAnB,CAA2BL,SAA3B,EAAsCO,CAAtC,KAA4CH,CAFhD,EAGE;AACAL,UAAAA,SAAS,CAACS,IAAV,CAAeZ,KAAK,CAACM,YAAN,CAAmBG,OAAnB,CAA2BL,SAA3B,CAAf;AACD,SALD,MAKO;AACLD,UAAAA,SAAS,CAACS,IAAV,CAAe;AAAEF,YAAAA,CAAC,EAAEL,CAAL;AAAQM,YAAAA,CAAC,EAAEH,CAAX;AAAcK,YAAAA,KAAK,EAAE;AAArB,WAAf;AACD;AACF,OAV+C,CAYhD;AACA;AACA;;AACD;AACF;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,SAAZ,EAvBuB,CAyBvB;;AAEA,sBACE;AAAA,2BACE;AAAA,gBACGH,KAAK,CAACM,YAAN,CAAmBG,OAAnB,CAA2BO,GAA3B,CAAgCC,IAAD,iBAC9B;AAAA,kBAAiDA,IAAI,CAACJ;AAAtD,SAASI,IAAI,CAACP,CAAL,CAAOQ,QAAP,KAAoBD,IAAI,CAACN,CAAL,CAAOO,QAAP,EAA7B;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AASD,CApCD;;GAAMnB,K;;KAAAA,K;AAsCN,eAAeA,KAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst Board = (props) => {\r\n  const [totalBoard, setTotalBoard] = useState(null);\r\n\r\n  let tempBoard = [];\r\n  let givenCell = 0;\r\n  for (let i = 0; i < props.initialBoard.size; i++) {\r\n    for (let j = 0; j < props.initialBoard.size; j++) {\r\n      if (props.initialBoard.squares[givenCell]) {\r\n        if (\r\n            props.initialBoard.squares[givenCell].x === i &&\r\n            props.initialBoard.squares[givenCell].y === j\r\n        ) {\r\n          tempBoard.push(props.initialBoard.squares[givenCell]);\r\n        } else {\r\n          tempBoard.push({ x: i, y: j, value: \"a\" });\r\n        }\r\n      }\r\n\r\n      //        if (props.initialBoard.squares[i])\r\n      //        let thisCell = props.initialBoard.squares['x']['y']\r\n      //      tempBoard = [...tempBoard, { x: i, y: j, value:  }];\r\n    }\r\n  }\r\n  console.log(tempBoard);\r\n\r\n  //let tempBoard = props.initialBoard.squares.map(cell => );\r\n\r\n  return (\r\n    <>\r\n      <ul>\r\n        {props.initialBoard.squares.map((cell) => (\r\n          <li key={cell.x.toString() + cell.y.toString()}>{cell.value}</li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}