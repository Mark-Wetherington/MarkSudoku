{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Desktop\\\\GitHub\\\\Sudoku\\\\src\\\\Components\\\\Game\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Board = props => {\n  _s();\n\n  const [totalBoard, setTotalBoard] = useState(null);\n  let initialBoard = props.initialBoard;\n  let tempBoard = [];\n\n  for (let i = 0; i < initialBoard.size; i++) {\n    for (let j = 0; j < initialBoard.size; j++) {\n      if (initialBoard.squares[0].x === i) {\n        tempBoard.push(initialBoard.squares[0]);\n      } else {\n        tempBoard.push({\n          x: i,\n          y: j,\n          value: 'a'\n        });\n        initialBoard.squares.shift();\n      } //        if (props.initialBoard.squares[i])\n      //        let thisCell = props.initialBoard.squares['x']['y']\n      //      tempBoard = [...tempBoard, { x: i, y: j, value:  }];\n\n    }\n  }\n\n  console.log(tempBoard); //let tempBoard = props.initialBoard.squares.map(cell => );\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: props.initialBoard.squares.map(cell => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: cell.value\n      }, cell.x.toString() + cell.y.toString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Board, \"2FUjwhX8IERv3aqV0pz/8ONqbfc=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Mark/Desktop/GitHub/Sudoku/src/Components/Game/Board.js"],"names":["useState","Board","props","totalBoard","setTotalBoard","initialBoard","tempBoard","i","size","j","squares","x","push","y","value","shift","console","log","map","cell","toString"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,IAAD,CAA5C;AAEA,MAAIK,YAAY,GAAGH,KAAK,CAACG,YAAzB;AACA,MAAIC,SAAS,GAAG,EAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAAY,CAACG,IAAjC,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,YAAY,CAACG,IAAjC,EAAuCC,CAAC,EAAxC,EAA4C;AACxC,UAAIJ,YAAY,CAACK,OAAb,CAAqB,CAArB,EAAwBC,CAAxB,KAA8BJ,CAAlC,EAAqC;AACjCD,QAAAA,SAAS,CAACM,IAAV,CAAeP,YAAY,CAACK,OAAb,CAAqB,CAArB,CAAf;AACH,OAFD,MAEO;AACHJ,QAAAA,SAAS,CAACM,IAAV,CAAe;AAACD,UAAAA,CAAC,EAAEJ,CAAJ;AAAOM,UAAAA,CAAC,EAAEJ,CAAV;AAAaK,UAAAA,KAAK,EAAE;AAApB,SAAf;AACAT,QAAAA,YAAY,CAACK,OAAb,CAAqBK,KAArB;AACH,OANuC,CASxC;AACR;AACA;;AACK;AACF;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ,EApBuB,CAuBzB;;AAEE,sBACE;AAAA,2BACE;AAAA,gBACGJ,KAAK,CAACG,YAAN,CAAmBK,OAAnB,CAA2BQ,GAA3B,CAAgCC,IAAD,iBAC9B;AAAA,kBAAiDA,IAAI,CAACL;AAAtD,SAASK,IAAI,CAACR,CAAL,CAAOS,QAAP,KAAoBD,IAAI,CAACN,CAAL,CAAOO,QAAP,EAA7B;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AASD,CAlCD;;GAAMnB,K;;KAAAA,K;AAoCN,eAAeA,KAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst Board = (props) => {\r\n  const [totalBoard, setTotalBoard] = useState(null);\r\n\r\n  let initialBoard = props.initialBoard;\r\n  let tempBoard = [];\r\n  for (let i = 0; i < initialBoard.size; i++) {\r\n    for (let j = 0; j < initialBoard.size; j++) {\r\n        if (initialBoard.squares[0].x === i) {\r\n            tempBoard.push(initialBoard.squares[0]);\r\n        } else {\r\n            tempBoard.push({x: i, y: j, value: 'a'});\r\n            initialBoard.squares.shift();\r\n        }\r\n\r\n\r\n        //        if (props.initialBoard.squares[i])\r\n//        let thisCell = props.initialBoard.squares['x']['y']\r\n//      tempBoard = [...tempBoard, { x: i, y: j, value:  }];\r\n    }\r\n  }\r\n  console.log(tempBoard);\r\n\r\n\r\n//let tempBoard = props.initialBoard.squares.map(cell => );\r\n\r\n  return (\r\n    <>\r\n      <ul>\r\n        {props.initialBoard.squares.map((cell) => (\r\n          <li key={cell.x.toString() + cell.y.toString()}>{cell.value}</li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}