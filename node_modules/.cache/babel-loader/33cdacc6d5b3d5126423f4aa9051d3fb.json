{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Desktop\\\\GitHub\\\\Sudoku\\\\src\\\\Components\\\\Game\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Board = props => {\n  _s();\n\n  const [totalBoard, setTotalBoard] = useState(null);\n  useEffect(() => {\n    let cellList = [];\n    let givenCell = 0;\n\n    for (let i = 0; i < props.initialData.size; i++) {\n      for (let j = 0; j < props.initialData.size; j++) {\n        if (props.initialData.squares[givenCell] && props.initialData.squares[givenCell].x === i && props.initialData.squares[givenCell].y === j) {\n          cellList.push(props.initialData.squares[givenCell]);\n          givenCell += 1;\n        } else {\n          cellList.push({\n            x: i,\n            y: j,\n            value: \"a\"\n          });\n        }\n      }\n    }\n\n    let initialBoard = [];\n\n    while (cellList.length) initialBoard.push(cellList.splice(0, props.initialData.size));\n\n    console.log(initialBoard);\n  }, [props.initialData, initialBoard]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: initialBoard.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.value\n          }, \"cell-\" + cell.x.toString() + cell.y.toString(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 17\n          }, this))\n        }, \"row-\" + row[0].x, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Board, \"Li0zjAPhxgGatKfHPvF/PeSTgOk=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Mark/Desktop/GitHub/Sudoku/src/Components/Game/Board.js"],"names":["useEffect","useState","Board","props","totalBoard","setTotalBoard","cellList","givenCell","i","initialData","size","j","squares","x","y","push","value","initialBoard","length","splice","console","log","map","row","cell","toString"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,IAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,QAAQ,GAAG,EAAf;AACA,QAAIC,SAAS,GAAG,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,WAAN,CAAkBC,IAAtC,EAA4CF,CAAC,EAA7C,EAAiD;AAC/C,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACM,WAAN,CAAkBC,IAAtC,EAA4CC,CAAC,EAA7C,EAAiD;AAC/C,YACER,KAAK,CAACM,WAAN,CAAkBG,OAAlB,CAA0BL,SAA1B,KACAJ,KAAK,CAACM,WAAN,CAAkBG,OAAlB,CAA0BL,SAA1B,EAAqCM,CAArC,KAA2CL,CAD3C,IAEAL,KAAK,CAACM,WAAN,CAAkBG,OAAlB,CAA0BL,SAA1B,EAAqCO,CAArC,KAA2CH,CAH7C,EAIE;AACAL,UAAAA,QAAQ,CAACS,IAAT,CAAcZ,KAAK,CAACM,WAAN,CAAkBG,OAAlB,CAA0BL,SAA1B,CAAd;AACAA,UAAAA,SAAS,IAAI,CAAb;AACD,SAPD,MAOO;AACLD,UAAAA,QAAQ,CAACS,IAAT,CAAc;AAAEF,YAAAA,CAAC,EAAEL,CAAL;AAAQM,YAAAA,CAAC,EAAEH,CAAX;AAAcK,YAAAA,KAAK,EAAE;AAArB,WAAd;AACD;AACF;AACF;;AAED,QAAIC,YAAY,GAAG,EAAnB;;AACA,WAAOX,QAAQ,CAACY,MAAhB,EAAwBD,YAAY,CAACF,IAAb,CAAkBT,QAAQ,CAACa,MAAT,CAAgB,CAAhB,EAAmBhB,KAAK,CAACM,WAAN,CAAkBC,IAArC,CAAlB;;AACxBU,IAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AAGD,GAvBQ,EAuBN,CAACd,KAAK,CAACM,WAAP,EAAoBQ,YAApB,CAvBM,CAAT;AAyBA,sBACE;AAAA,2BACE;AAAA,6BACE;AAAA,kBACGA,YAAY,CAACK,GAAb,CAAkBC,GAAD,iBAChB;AAAA,oBACGA,GAAG,CAACD,GAAJ,CAASE,IAAD,iBACP;AAAA,sBACGD,GAAG,CAACP;AADP,aAAS,UAAUQ,IAAI,CAACX,CAAL,CAAOY,QAAP,EAAV,GAA8BD,IAAI,CAACV,CAAL,CAAOW,QAAP,EAAvC;AAAA;AAAA;AAAA;AAAA,kBADD;AADH,WAAS,SAASF,GAAG,CAAC,CAAD,CAAH,CAAOV,CAAzB;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAiBD,CA7CD;;GAAMX,K;;KAAAA,K;AA+CN,eAAeA,KAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst Board = (props) => {\r\n  const [totalBoard, setTotalBoard] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let cellList = [];\r\n    let givenCell = 0;\r\n    for (let i = 0; i < props.initialData.size; i++) {\r\n      for (let j = 0; j < props.initialData.size; j++) {\r\n        if (\r\n          props.initialData.squares[givenCell] &&\r\n          props.initialData.squares[givenCell].x === i &&\r\n          props.initialData.squares[givenCell].y === j\r\n        ) {\r\n          cellList.push(props.initialData.squares[givenCell]);\r\n          givenCell += 1;\r\n        } else {\r\n          cellList.push({ x: i, y: j, value: \"a\" });\r\n        }\r\n      }\r\n    }\r\n\r\n    let initialBoard = [];\r\n    while (cellList.length) initialBoard.push(cellList.splice(0, props.initialData.size));\r\n    console.log(initialBoard);\r\n\r\n\r\n  }, [props.initialData, initialBoard]);\r\n\r\n  return (\r\n    <>\r\n      <table>\r\n        <tbody>\r\n          {initialBoard.map((row) => (\r\n            <tr key={\"row-\" + row[0].x}>\r\n              {row.map((cell) => (\r\n                <td key={\"cell-\" + cell.x.toString() + cell.y.toString()}>\r\n                  {row.value}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}