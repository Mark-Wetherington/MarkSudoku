{"ast":null,"code":"import _slicedToArray from\"C:/Users/Mark/Desktop/GitHub/sudoku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Board=function Board(props){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),totalBoard=_useState2[0],setTotalBoard=_useState2[1];useEffect(function(){var cellList=[];var givenCell=0;for(var i=0;i<props.initialData.size;i++){for(var j=0;j<props.initialData.size;j++){if(props.initialData.squares[givenCell]&&props.initialData.squares[givenCell].x===i&&props.initialData.squares[givenCell].y===j){cellList.push(props.initialData.squares[givenCell]);givenCell+=1;}else{cellList.push({x:i,y:j,value:\"a\"});}}}var initialBoard=[];while(cellList.length){initialBoard.push(cellList.splice(0,props.initialData.size));}console.log(initialBoard);setTotalBoard(function(){return initialBoard;});},[props.initialData]);return/*#__PURE__*/_jsx(_Fragment,{children:totalBoard&&/*#__PURE__*/_jsx(\"table\",{children:/*#__PURE__*/_jsx(\"tbody\",{children:totalBoard.map(function(row){return/*#__PURE__*/_jsx(\"tr\",{children:row.map(function(cell){return/*#__PURE__*/_jsx(\"td\",{children:cell.value},\"cell-\"+cell.x.toString()+cell.y.toString());})},\"row-\"+row[0].x);})})})});};export default Board;","map":{"version":3,"sources":["C:/Users/Mark/Desktop/GitHub/Sudoku/src/Components/Game/Board.js"],"names":["useEffect","useState","Board","props","totalBoard","setTotalBoard","cellList","givenCell","i","initialData","size","j","squares","x","y","push","value","initialBoard","length","splice","console","log","map","row","cell","toString"],"mappings":"0JAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,C,gGAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,KAAD,CAAW,CACvB,cAAoCF,QAAQ,CAAC,IAAD,CAA5C,wCAAOG,UAAP,eAAmBC,aAAnB,eAEAL,SAAS,CAAC,UAAM,CACd,GAAIM,CAAAA,QAAQ,CAAG,EAAf,CACA,GAAIC,CAAAA,SAAS,CAAG,CAAhB,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGL,KAAK,CAACM,WAAN,CAAkBC,IAAtC,CAA4CF,CAAC,EAA7C,CAAiD,CAC/C,IAAK,GAAIG,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGR,KAAK,CAACM,WAAN,CAAkBC,IAAtC,CAA4CC,CAAC,EAA7C,CAAiD,CAC/C,GACER,KAAK,CAACM,WAAN,CAAkBG,OAAlB,CAA0BL,SAA1B,GACAJ,KAAK,CAACM,WAAN,CAAkBG,OAAlB,CAA0BL,SAA1B,EAAqCM,CAArC,GAA2CL,CAD3C,EAEAL,KAAK,CAACM,WAAN,CAAkBG,OAAlB,CAA0BL,SAA1B,EAAqCO,CAArC,GAA2CH,CAH7C,CAIE,CACAL,QAAQ,CAACS,IAAT,CAAcZ,KAAK,CAACM,WAAN,CAAkBG,OAAlB,CAA0BL,SAA1B,CAAd,EACAA,SAAS,EAAI,CAAb,CACD,CAPD,IAOO,CACLD,QAAQ,CAACS,IAAT,CAAc,CAAEF,CAAC,CAAEL,CAAL,CAAQM,CAAC,CAAEH,CAAX,CAAcK,KAAK,CAAE,GAArB,CAAd,EACD,CACF,CACF,CAED,GAAIC,CAAAA,YAAY,CAAG,EAAnB,CACA,MAAOX,QAAQ,CAACY,MAAhB,EACED,YAAY,CAACF,IAAb,CAAkBT,QAAQ,CAACa,MAAT,CAAgB,CAAhB,CAAmBhB,KAAK,CAACM,WAAN,CAAkBC,IAArC,CAAlB,EADF,CAEAU,OAAO,CAACC,GAAR,CAAYJ,YAAZ,EAEAZ,aAAa,CAAC,UAAM,CAClB,MAAOY,CAAAA,YAAP,CACD,CAFY,CAAb,CAGD,CA1BQ,CA0BN,CAACd,KAAK,CAACM,WAAP,CA1BM,CAAT,CA4BA,mBACE,yBACGL,UAAU,eACT,oCACE,uBACGA,UAAU,CAACkB,GAAX,CAAe,SAACC,GAAD,qBACd,oBACGA,GAAG,CAACD,GAAJ,CAAQ,SAACE,IAAD,qBACP,oBACGA,IAAI,CAACR,KADR,EAAS,QAAUQ,IAAI,CAACX,CAAL,CAAOY,QAAP,EAAV,CAA8BD,IAAI,CAACV,CAAL,CAAOW,QAAP,EAAvC,CADO,EAAR,CADH,EAAS,OAASF,GAAG,CAAC,CAAD,CAAH,CAAOV,CAAzB,CADc,EAAf,CADH,EADF,EAFJ,EADF,CAmBD,CAlDD,CAoDA,cAAeX,CAAAA,KAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst Board = (props) => {\r\n  const [totalBoard, setTotalBoard] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let cellList = [];\r\n    let givenCell = 0;\r\n    for (let i = 0; i < props.initialData.size; i++) {\r\n      for (let j = 0; j < props.initialData.size; j++) {\r\n        if (\r\n          props.initialData.squares[givenCell] &&\r\n          props.initialData.squares[givenCell].x === i &&\r\n          props.initialData.squares[givenCell].y === j\r\n        ) {\r\n          cellList.push(props.initialData.squares[givenCell]);\r\n          givenCell += 1;\r\n        } else {\r\n          cellList.push({ x: i, y: j, value: \"a\" });\r\n        }\r\n      }\r\n    }\r\n\r\n    let initialBoard = [];\r\n    while (cellList.length)\r\n      initialBoard.push(cellList.splice(0, props.initialData.size));\r\n    console.log(initialBoard);\r\n\r\n    setTotalBoard(() => {\r\n      return initialBoard;\r\n    });\r\n  }, [props.initialData]);\r\n\r\n  return (\r\n    <>\r\n      {totalBoard && (\r\n        <table>\r\n          <tbody>\r\n            {totalBoard.map((row) => (\r\n              <tr key={\"row-\" + row[0].x}>\r\n                {row.map((cell) => (\r\n                  <td key={\"cell-\" + cell.x.toString() + cell.y.toString()}>\r\n                    {cell.value}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}