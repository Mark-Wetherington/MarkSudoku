{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Desktop\\\\GitHub\\\\Sudoku\\\\src\\\\Components\\\\Game\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Board = props => {\n  _s();\n\n  const [totalBoard, setTotalBoard] = useState(null);\n  let cellList = [];\n  let givenCell = 0;\n\n  for (let i = 0; i < props.initialData.size; i++) {\n    for (let j = 0; j < props.initialData.size; j++) {\n      if (props.initialData.squares[givenCell] && props.initialData.squares[givenCell].x === i && props.initialData.squares[givenCell].y === j) {\n        cellList.push(props.initialData.squares[givenCell]);\n        givenCell += 1;\n      } else {\n        cellList.push({\n          x: i,\n          y: j,\n          value: \"a\"\n        });\n      }\n    }\n  }\n\n  let initialBoard = [];\n\n  while (cellList.length) initialBoard.push(cellList.splice(0, props.initialData.size));\n\n  console.log(initialBoard);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: props.initialData.squares.map(cell => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: cell.value\n      }, cell.x.toString() + cell.y.toString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: initialBoard.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.map(cell => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.value\n        }, '1', false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 34\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Board, \"2FUjwhX8IERv3aqV0pz/8ONqbfc=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Mark/Desktop/GitHub/Sudoku/src/Components/Game/Board.js"],"names":["useState","Board","props","totalBoard","setTotalBoard","cellList","givenCell","i","initialData","size","j","squares","x","y","push","value","initialBoard","length","splice","console","log","map","cell","toString","row"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,IAAD,CAA5C;AAEA,MAAIK,QAAQ,GAAG,EAAf;AACA,MAAIC,SAAS,GAAG,CAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,WAAN,CAAkBC,IAAtC,EAA4CF,CAAC,EAA7C,EAAiD;AAC/C,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACM,WAAN,CAAkBC,IAAtC,EAA4CC,CAAC,EAA7C,EAAiD;AAC/C,UACER,KAAK,CAACM,WAAN,CAAkBG,OAAlB,CAA0BL,SAA1B,KACAJ,KAAK,CAACM,WAAN,CAAkBG,OAAlB,CAA0BL,SAA1B,EAAqCM,CAArC,KAA2CL,CAD3C,IAEAL,KAAK,CAACM,WAAN,CAAkBG,OAAlB,CAA0BL,SAA1B,EAAqCO,CAArC,KAA2CH,CAH7C,EAIE;AACAL,QAAAA,QAAQ,CAACS,IAAT,CAAcZ,KAAK,CAACM,WAAN,CAAkBG,OAAlB,CAA0BL,SAA1B,CAAd;AACAA,QAAAA,SAAS,IAAI,CAAb;AACD,OAPD,MAOO;AACLD,QAAAA,QAAQ,CAACS,IAAT,CAAc;AAAEF,UAAAA,CAAC,EAAEL,CAAL;AAAQM,UAAAA,CAAC,EAAEH,CAAX;AAAcK,UAAAA,KAAK,EAAE;AAArB,SAAd;AACD;AACF;AACF;;AAED,MAAIC,YAAY,GAAG,EAAnB;;AACA,SAAMX,QAAQ,CAACY,MAAf,EAAuBD,YAAY,CAACF,IAAb,CAAkBT,QAAQ,CAACa,MAAT,CAAgB,CAAhB,EAAkBhB,KAAK,CAACM,WAAN,CAAkBC,IAApC,CAAlB;;AACvBU,EAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AAEA,sBACE;AAAA,4BACE;AAAA,gBACGd,KAAK,CAACM,WAAN,CAAkBG,OAAlB,CAA0BU,GAA1B,CAA+BC,IAAD,iBAC7B;AAAA,kBAAiDA,IAAI,CAACP;AAAtD,SAASO,IAAI,CAACV,CAAL,CAAOW,QAAP,KAAoBD,IAAI,CAACT,CAAL,CAAOU,QAAP,EAA7B;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAA,gBACCP,YAAY,CAACK,GAAb,CAAkBG,GAAD,iBACd;AAAA,kBAAKA,GAAG,CAACH,GAAJ,CAASC,IAAD,iBAAU;AAAA,oBAAeE,GAAG,CAACT;AAAnB,WAAS,GAAT;AAAA;AAAA;AAAA;AAAA,gBAAlB;AAAL;AAAA;AAAA;AAAA;AAAA,cADH;AADD;AAAA;AAAA;AAAA;AAAA,YANF;AAAA,kBADF;AAcD,CAtCD;;GAAMd,K;;KAAAA,K;AAwCN,eAAeA,KAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst Board = (props) => {\r\n  const [totalBoard, setTotalBoard] = useState(null);\r\n\r\n  let cellList = [];\r\n  let givenCell = 0;\r\n  for (let i = 0; i < props.initialData.size; i++) {\r\n    for (let j = 0; j < props.initialData.size; j++) {\r\n      if (\r\n        props.initialData.squares[givenCell] &&\r\n        props.initialData.squares[givenCell].x === i &&\r\n        props.initialData.squares[givenCell].y === j\r\n      ) {\r\n        cellList.push(props.initialData.squares[givenCell]);\r\n        givenCell += 1;\r\n      } else {\r\n        cellList.push({ x: i, y: j, value: \"a\" });\r\n      }\r\n    }\r\n  }\r\n\r\n  let initialBoard = [];\r\n  while(cellList.length) initialBoard.push(cellList.splice(0,props.initialData.size));\r\n  console.log(initialBoard);\r\n\r\n  return (\r\n    <>\r\n      <ul>\r\n        {props.initialData.squares.map((cell) => (\r\n          <li key={cell.x.toString() + cell.y.toString()}>{cell.value}</li>\r\n        ))}\r\n      </ul>\r\n      <table>\r\n      {initialBoard.map((row) => (\r\n          <tr>{row.map((cell) => <tr key={'1'}>{row.value}</tr>)}</tr>\r\n      ))}\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}