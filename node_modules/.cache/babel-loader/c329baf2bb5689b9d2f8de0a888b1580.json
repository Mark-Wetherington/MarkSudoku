{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Desktop\\\\GitHub\\\\Sudoku\\\\src\\\\Components\\\\Game\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Board = props => {\n  _s();\n\n  const [totalBoard, setTotalBoard] = useState(null);\n  let tempBoard = [1, 3, 4, 5, 6, 7, 8]; //   for (let i = 0; i < props.initialBoard.size; i++) {\n  //     for (let j = 0; j < props.initialBoard.size; j++) {\n  //         tempBoard.push({x: i, y: j, value: ''});\n  //         //        if (props.initialBoard.squares[i])\n  // //        let thisCell = props.initialBoard.squares['x']['y']\n  // //      tempBoard = [...tempBoard, { x: i, y: j, value:  }];\n  //     }\n  //   }\n\n  tempBoard.fill(0, 0, 4); //let tempBoard = props.initialBoard.squares.map(cell => );\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: props.initialBoard.squares.map(cell => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: cell.value\n      }, cell.x.toString() + cell.y.toString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Board, \"2FUjwhX8IERv3aqV0pz/8ONqbfc=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Mark/Desktop/GitHub/Sudoku/src/Components/Game/Board.js"],"names":["useState","Board","props","totalBoard","setTotalBoard","tempBoard","fill","initialBoard","squares","map","cell","value","x","toString","y"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,IAAD,CAA5C;AAEA,MAAIK,SAAS,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,CAAhB,CAHuB,CAIzB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEAA,EAAAA,SAAS,CAACC,IAAV,CAAe,CAAf,EAAiB,CAAjB,EAAmB,CAAnB,EAdyB,CAgBzB;;AAEE,sBACE;AAAA,2BACE;AAAA,gBACGJ,KAAK,CAACK,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,IAAD,iBAC9B;AAAA,kBAAiDA,IAAI,CAACC;AAAtD,SAASD,IAAI,CAACE,CAAL,CAAOC,QAAP,KAAoBH,IAAI,CAACI,CAAL,CAAOD,QAAP,EAA7B;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AASD,CA3BD;;GAAMZ,K;;KAAAA,K;AA6BN,eAAeA,KAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst Board = (props) => {\r\n  const [totalBoard, setTotalBoard] = useState(null);\r\n\r\n  let tempBoard = [1,3,4,5,6,7,8];\r\n//   for (let i = 0; i < props.initialBoard.size; i++) {\r\n//     for (let j = 0; j < props.initialBoard.size; j++) {\r\n//         tempBoard.push({x: i, y: j, value: ''});\r\n\r\n//         //        if (props.initialBoard.squares[i])\r\n// //        let thisCell = props.initialBoard.squares['x']['y']\r\n// //      tempBoard = [...tempBoard, { x: i, y: j, value:  }];\r\n//     }\r\n//   }\r\n\r\ntempBoard.fill(0,0,4);\r\n\r\n//let tempBoard = props.initialBoard.squares.map(cell => );\r\n\r\n  return (\r\n    <>\r\n      <ul>\r\n        {props.initialBoard.squares.map((cell) => (\r\n          <li key={cell.x.toString() + cell.y.toString()}>{cell.value}</li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}